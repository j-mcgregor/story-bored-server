# ---- PRIMITVE ----
# import User from "user.graphql"
# import Notification from "notification.graphql"
# import Post from "post.graphql"
# import StoryLength from "storyLength.graphql"
# import CharacterType, CharacterBodyPartsType, CharacterDescriptionsType, CharacterHonorificsType, CharacterFirstNameType, CharacterLastNameType, CharacterOccupationType, CharacterTitleType, GenerateCharacter from "characterType.graphql"
# import GenreType from "genres.graphql"
# import WritingPrompt, PlotDevice, StageType, StoryScene, StoryStageEnum from "data.graphql"
# ---- COMPLEX ----
# import Head from "head.graphql"

type Query {
    users: [User!]!
    user(id: ID!): User
    posts: [Post!]!
    notifications: [Notification!]!

    # STORY
    # -- length
    storyLength: [StoryLength]!
    # -- character type
    characterType: [CharacterType]!
    # -- genre type
    genreType: [GenreType]!
    # DATA
    # -- wiritng prompt
    writingPrompt: [WritingPrompt]!
    # -- plot devices
    plotDevices: [PlotDevice]!
    # -- story stages
    storyStages: [StageType]!
    # -- story scenes
    storyScenes: [StoryScene]!

    # CHARACTER
    # -- body parts
    characterBodyParts: [CharacterBodyPartsType]!
    # -- descriptions
    characterDescriptions: [CharacterDescriptionsType]!
    # -- honorifics
    characterHonorifics: [CharacterHonorificsType]!
    # -- first names
    characterFirstNames: [CharacterFirstNameType]!
    # -- last names
    characterLastNames: [CharacterLastNameType]!
    # -- moods
    characterMoods: [CharacterMoodType]!
    # -- occupations
    characterOccupations: [CharacterOccupationType]!
    # -- titles
    characterTitles: [CharacterTitleType]!

    # CHARACTER GENERATION
    generateCharacter(input: GenerateCharacterInput): GenerateCharacter
}

type Mutation {
    signInEmail(email: String!, password: String!): AuthPayload!
    signInGoogle(socialUser: SocialUserInput!): AuthPayload!
    signInFacebook(socialUser: SocialUserInput!): AuthPayload!
    signInApple(socialUser: SocialUserInput!): AuthPayload!
    signUp(user: UserInput!): AuthPayload!
    addNotificationToken(notification: NotificationInput!): Notification
    updateProfile(user: UserInput!): User
    # STORY
    # -- length
    addStoryLength(storyLength: StoryLengthInput!): [StoryLength]
    updateStoryLength(storyLength: StoryLengthInput!): StoryLength
    deleteStoryLength(storyLengthId: String!): String
    # -- character type
    addCharacterType(characterType: CharacterInput!): CharacterType
    updateCharacterType(characterType: CharacterInput!): CharacterType
    deleteCharacterType(characterTypeId: String!): String
    # -- genre type
    addGenreType(genreType: GenreTypeInput!): [GenreType]
    updateGenreType(genreType: GenreTypeInput!): GenreType
    deleteGenreType(genreTypeId: String!): String
    # DATA
    # -- writing prompts
    addWritingPrompt(writingPrompt: WritingPromptInput!): WritingPrompt
    updateWritingPrompt(writingPrompt: WritingPromptInput!): WritingPrompt
    deleteWritingPrompt(writingPromptId: String!): String
    bulkAddWritingPrompt(writingPrompts: [WritingPromptInput]!): [WritingPrompt]
    # -- plot devices
    addPlotDevice(plotDevice: PlotDeviceInput!): [PlotDevice]
    updatePlotDevice(plotDevice: PlotDeviceInput!): PlotDevice
    deletePlotDevice(plotDeviceId: String!): String
    bulkAddPlotDevice(plotDevices: [PlotDeviceInput]!): [PlotDevice]
    # -- story stage
    addStoryStage(storyStage: StoryStageInput!): StageType
    updateStoryStage(storyStage: StoryStageInput!): StageType
    deleteStoryStage(storyStageId: String!): String
    bulkAddStoryStage(storyStages: [StoryStageInput]!): [StageType]
    # -- story stage
    addStoryScene(storyScene: StorySceneInput!): StoryScene
    updateStoryScene(storyScene: StorySceneInput!): StoryScene
    deleteStoryScene(storySceneId: String!): String
    bulkAddStoryScene(storyScenes: [StorySceneInput]!): [StoryScene]
    # STORY GENERATION
    # -- head
    createHead(meta: HeadInput): Head
    # -- generate structure
    generateSections(
        type: StructureTypeEnum
        prologue: Boolean
        epilogue: Boolean
    ): [SectionType]
    generateSectionsWithStages(
        type: StructureTypeEnum
        prologue: Boolean
        epilogue: Boolean
    ): [SectionType]
    generateSectionsWithChapters(
        type: StructureTypeEnum
        prologue: Boolean
        epilogue: Boolean
        numberOfChapters: Int
        nested: Boolean
        length: StoryLengthType
    ): [SectionType]
    generateSectionsWithScenes(
        type: StructureTypeEnum
        prologue: Boolean
        epilogue: Boolean
        numberOfChapters: Int
        nested: Boolean
        length: StoryLengthType
    ): [SectionType]
    generateStructure(
        type: StructureTypeEnum
        prologue: Boolean
        epilogue: Boolean
        numberOfChapters: Int
        nested: Boolean
        length: StoryLengthType
        includeStages: Boolean
        includeChapters: Boolean
        includeScenes: Boolean
    ): [SectionType]
    # CHARACTER GENERATION

    # -- body part
    addCharacterBodyParts(part: String): CharacterBodyPartsType
    updateCharacterBodyParts(
        part: CharacterBodyPartsInput
    ): CharacterBodyPartsType
    deleteCharacterBodyParts(part: CharacterBodyPartsInput): String
    bulkAddCharacterBodyParts(
        parts: [CharacterBodyPartsInput]!
    ): [CharacterBodyPartsType]

    # -- description
    addCharacterDescriptions(description: String): CharacterDescriptionsType
    updateCharacterDescriptions(
        description: CharacterDescriptionsInput
    ): CharacterDescriptionsType
    deleteCharacterDescriptions(descriptionId: String!): String
    bulkAddCharacterDescriptions(
        descriptions: [CharacterDescriptionsInput]!
    ): [CharacterDescriptionsType]

    # -- honorifics
    addCharacterHonorifics(honorific: String): CharacterHonorificsType
    updateCharacterHonorifics(
        honorific: CharacterHonorificsInput
    ): CharacterHonorificsType
    deleteCharacterHonorifics(honorificId: String!): String
    bulkAddCharacterHonorifics(
        honorifics: [CharacterHonorificsInput]!
    ): [CharacterHonorificsType]

    # -- first name
    addCharacterFirstName(
        first_name: CharacterFirstNameInput
    ): CharacterFirstNameType
    updateCharacterFirstName(
        first_name: CharacterFirstNameInput
    ): CharacterFirstNameType
    deleteCharacterFirstName(first_nameId: String!): String
    bulkAddCharacterFirstNames(
        first_names: [CharacterFirstNameInput]!
    ): [CharacterFirstNameType]

    # -- last name
    addCharacterLastName(
        last_name: CharacterLastNameInput
    ): CharacterLastNameType
    updateCharacterLastName(
        last_name: CharacterLastNameInput
    ): CharacterLastNameType
    deleteCharacterLastName(last_nameId: String!): String
    bulkAddCharacterLastNames(
        last_names: [CharacterLastNameInput]!
    ): [CharacterLastNameType]

    # -- mood
    addCharacterMood(mood: CharacterMoodInput): CharacterMoodType
    updateCharacterMood(mood: CharacterMoodInput): CharacterMoodType
    deleteCharacterMood(moodId: String!): String
    bulkAddCharacterMoods(moods: [CharacterMoodInput]!): [CharacterMoodType]

    # -- occupation
    addCharacterOccupation(
        occupation: CharacterOccupationInput
    ): CharacterOccupationType
    updateCharacterOccupation(
        occupation: CharacterOccupationInput
    ): CharacterOccupationType
    deleteCharacterOccupation(occupationId: String!): String
    bulkAddCharacterOccupations(
        occupations: [CharacterOccupationInput]!
    ): [CharacterOccupationType]

    # -- title
    addCharacterTitle(title: CharacterTitleInput): CharacterTitleType
    updateCharacterTitle(title: CharacterTitleInput): CharacterTitleType
    deleteCharacterTitle(titleId: String!): String
    bulkAddCharacterTitles(titles: [CharacterTitleInput]!): [CharacterTitleType]
}

type Subscription {
    userSignedIn: User
    userUpdated: User
}

# ----- TYPES --------------------------------

enum StructureTypeEnum {
    TRADITIONAL
}

input BodyStructureTypeInput {
    type: StructureTypeEnum
    prologue: Boolean
    epilogue: Boolean
}

type SectionType {
    section: Int
    name: String
    stages: [StageType]
    chapters: [ChapterType]
    scenes: [SceneType]
    avMinWordsPerSection: Int
    avMaxWordsPerSection: Int
    avChaptersPerSection: Int
}

input SectionInput {
    section: Int
    name: String
}

type ChapterType {
    chapter: Int
    avMinWordsPerChapter: Int
    avMaxWordsPerChapter: Int
    scenes: [SceneType]
}

type SceneType {
    defaultStage: StoryStageEnum
    defaultScene: Int
    description: String
}
